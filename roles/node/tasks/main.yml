## 9022 - ssh port
---
- name: Install / make sure Docker is present
  apt: pkg={{ item }} state=present
  with_items:
    - 'docker.io'

- name: Check that the docker daemon is started
  service: name=docker.io state=started

- name: Populate apps.json with all running apps
  template: src=apps.json dest=/var/goddard/apps.json

- name: Write out the NGINX config for the server
  template: src=nginx.conf dest=/etc/nginx/nginx.conf

- name: Write out the NGINX config for all the apps
  template: src=nginx.site.conf dest=/etc/nginx/conf.d/apps.conf

- name: Write out the NGINX config for all the apps
  service: name=nginx state=restarted

- name: Assures /var/goddard/apps exists
  file: path=/var/goddard/apps state=directory

- name: Clone down code for each app
  synchronize: src=/var/goddard/apps/{{item.key}}/ dest=/var/goddard/apps/{{item.key}} recursive=yes
  when: apps is defined
  with_items: apps

- name: Import our base image
  shell: docker load < /var/goddard/base.img.tar

- name: Import our base image
  shell: docker load < /var/goddard/node.img.tar

- name: Import our base image
  shell: docker load < /var/goddard/nginx.img.tar

- name: Build Docker image of each App
  shell: docker build --tag="{{item.key}}" --rm=true .
  args:
    chdir: "/var/goddard/apps/{{item.key}}"
  when: apps is defined
  with_items: apps

- name: Delete all containers of the image
  shell: docker kill $(docker ps -a -q)
  when: apps is defined
  with_items: apps
  ignore_errors: yes

- name: Start the app containers
  shell: docker run -p {{item.port}}:8080 -d {{item.key}}
  when: apps is defined
  with_items: apps
